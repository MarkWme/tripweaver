name: tripweaver-ci

on:
  push: { branches: [main] }
  pull_request:

env:
  REGISTRY: ${{ vars.JFROG_REGISTRY }}         # e.g. <org>.jfrog.io
  IMG_API: ${{ vars.JFROG_REGISTRY }}/tripweaver-api
  IMG_FE:  ${{ vars.JFROG_REGISTRY }}/tripweaver-frontend
  IMG_SEED: ${{ vars.JFROG_REGISTRY }}/tripweaver-seedgen
  # Enable command summaries for GitHub Actions integration
  # JFROG_CLI_COMMAND_SUMMARY_OUTPUT_DIR: ${{ runner.temp }}/jfrog-command-summaries

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      # ---- JFrog CLI (OIDC) ----
      - id: jf-setup
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER }}
        env:
          JF_URL: ${{ vars.JF_URL }}

      - run: |
          echo "JFrog CLI configured and ready"
          jf -v
          jf rt ping

      # ---- Resolve deps via Artifactory and ATTACH AS MODULES ----
      # Python (pip → module api-pip)
      - name: Pip resolve via Artifactory
        working-directory: api
        env:
          JF_PYPI_REPO: ${{ vars.JF_PYPI_REPO }}   # virtual (e.g. pypi)
        run: |
          mkdir -p wheelhouse
          jf pip-config --repo-resolve "$JF_PYPI_REPO" || true
          jf pip download -r requirements.txt --dest wheelhouse \
            --module api-pip

      # npm (frontend → module fe-npm)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Validate lockfile completeness
        working-directory: frontend
        run: |
          if ! jq '.packages | length' package-lock.json >/dev/null 2>&1; then
            echo "::error::package-lock.json is not valid JSON or missing .packages section"; exit 1; fi
          COUNT=$(jq '.packages | length' package-lock.json)
          if [ "$COUNT" -le 1 ]; then
            echo "::error::package-lock.json appears incomplete (packages length=$COUNT). Regenerate with: npm install --package-lock-only"; exit 1; fi
          if ! grep -q '"integrity"' package-lock.json; then
            echo "::error::No integrity fields found in lock file; regenerate with a modern npm."; exit 1; fi
      - name: NPM resolve via Artifactory
        working-directory: frontend
        env:
          ARTIFACTORY_NPM_REGISTRY: ${{ vars.ARTIFACTORY_NPM_REGISTRY }} # https://<org>.jfrog.io/artifactory/api/npm/npm/
        run: |
          jf npm-config --global=true --repo-resolve "$ARTIFACTORY_NPM_REGISTRY" || true
          jf npm ci --module fe-npm
          rm -rf node_modules  # keep image slim; we only needed lockfile validation

      # NuGet (.NET → module seed-nuget)
      - name: NuGet resolve via Artifactory
        working-directory: tools/seedgen
        env: 
          ARTIFACTORY_NUGET_SOURCE: ${{ vars.ARTIFACTORY_NUGET_SOURCE }} # https://<org>.jfrog.io/artifactory/api/nuget/nuget
        run: |
          jf dotnet-config --repo-resolve "$ARTIFACTORY_NUGET_SOURCE" || true
          jf dotnet restore --module seed-nuget

      # ---- Build & push images (attach to SAME build) ----
      - uses: docker/setup-buildx-action@v3
      - name: Docker login
        run: echo "${{ steps.jf-setup.outputs.oidc-token }}" >/dev/null || true  # no-op; jf handles auth
      - name: Build+push API
        run: |
          jf docker build -t $IMG_API:${{ github.sha }} -f api/Dockerfile api
          jf docker push  $IMG_API:${{ github.sha }}
          echo "API_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMG_API:${{ github.sha }} | cut -d'@' -f2)" >> $GITHUB_ENV
      - name: Build+push Frontend
        run: |
          jf docker build -t $IMG_FE:${{ github.sha }} -f frontend/Dockerfile frontend
          jf docker push  $IMG_FE:${{ github.sha }}
          echo "FE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMG_FE:${{ github.sha }} | cut -d'@' -f2)" >> $GITHUB_ENV
      - name: Build+push Seedgen
        run: |
          jf docker build -t $IMG_SEED:${{ github.sha }} -f tools/seedgen/Dockerfile tools/seedgen
          jf docker push  $IMG_SEED:${{ github.sha }}
          echo "SEED_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMG_SEED:${{ github.sha }} | cut -d'@' -f2)" >> $GITHUB_ENV

      # ---- SBOM (CycloneDX only; attach to build) ----
      - name: Install Syft
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Generate+upload SBOMs
        run: |
          mkdir -p _sbom
          syft $IMG_API@${API_DIGEST}   -o cyclonedx-json > _sbom/api.cdx.json
          syft $IMG_FE@${FE_DIGEST}     -o cyclonedx-json > _sbom/frontend.cdx.json
          syft $IMG_SEED@${SEED_DIGEST} -o cyclonedx-json > _sbom/seed.cdx.json
          jf rt u "_sbom/*.json" "tripweaver-sbom/sbom/tripweaver-ci/${{ github.run_id }}/"

      # ---- Sign images (Cosign keyless). Optional: set COSIGN_EXPERIMENTAL=1 if needed ----
      - uses: sigstore/cosign-installer@v3.7.0
      - name: Sign images
        env: { COSIGN_YES: "true" }
        run: |
          cosign sign $IMG_API@${API_DIGEST}
          cosign sign $IMG_FE@${FE_DIGEST}
          cosign sign $IMG_SEED@${SEED_DIGEST}

      # ---- Xray scanning (build indexing enabled via enable-build-indexing.sh) ----
      # Note: build-info will be automatically published at workflow completion
      - name: Xray scan build-info
        run: |
          echo "Scanning build: $JFROG_CLI_BUILD_NAME #$JFROG_CLI_BUILD_NUMBER"
          jf build-scan "$JFROG_CLI_BUILD_NAME" "$JFROG_CLI_BUILD_NUMBER" --fail=false

      - name: Xray scan Docker images
        run: |
          echo "Scanning Docker images (automatically linked to build: $JFROG_CLI_BUILD_NAME #$JFROG_CLI_BUILD_NUMBER)..."

          echo "Scanning API image for vulnerabilities..."
          jf docker scan $IMG_API@${API_DIGEST} --fail=false --format=table

          echo "Scanning Frontend image for vulnerabilities..."
          jf docker scan $IMG_FE@${FE_DIGEST} --fail=false --format=table

          echo "Scanning Seedgen image for vulnerabilities..."
          jf docker scan $IMG_SEED@${SEED_DIGEST} --fail=false --format=table
