name: tripweaver-ci

on:
  push: { branches: [main] }
  pull_request:

env:
  BUILD_NAME: tripweaver
  BUILD_NUMBER: ${{ github.run_id }}
  REGISTRY: ${{ vars.JFROG_REGISTRY }}         # e.g. <org>.jfrog.io
  IMG_API: ${{ vars.JFROG_REGISTRY }}/tripweaver-api
  IMG_FE:  ${{ vars.JFROG_REGISTRY }}/tripweaver-frontend
  IMG_SEED:${{ vars.JFROG_REGISTRY }}/tripweaver-seedgen

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      # ---- JFrog CLI (OIDC) ----
      - uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER }}
        env: { JF_URL: ${{ vars.JF_URL }} }

      - run: |
          echo "Build: $BUILD_NAME #$BUILD_NUMBER"
          jf -v
          jf rt ping

      # ---- Resolve deps via Artifactory and ATTACH AS MODULES ----
      # Python (pip → module api-pip)
      - name: Pip resolve via Artifactory
        working-directory: api
        env: { JF_PYPI_REPO: ${{ vars.JF_PYPI_REPO }} }   # virtual (e.g. pypi)
        run: |
          mkdir -p wheelhouse
          jf pip-config --repo-resolve "$JF_PYPI_REPO" || true
          jf pip download -r requirements.txt --dest wheelhouse \
            --module api-pip --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"

      # npm (frontend → module fe-npm)
      - name: NPM resolve via Artifactory
        working-directory: frontend
        env:
          ARTIFACTORY_NPM_REGISTRY: ${{ vars.ARTIFACTORY_NPM_REGISTRY }} # https://<org>.jfrog.io/artifactory/api/npm/npm/
        run: |
          jf npm-config --global=true --repo-resolve "$ARTIFACTORY_NPM_REGISTRY" || true
          jf npm ci --module fe-npm --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          rm -rf node_modules  # keep image slim; we only needed lockfile validation

      # NuGet (.NET → module seed-nuget)
      - name: NuGet resolve via Artifactory
        working-directory: tools/seedgen
        env: { ARTIFACTORY_NUGET_SOURCE: ${{ vars.ARTIFACTORY_NUGET_SOURCE }} } # https://<org>.jfrog.io/artifactory/api/nuget/nuget
        run: |
          jf dotnet-config --repo-resolve "$ARTIFACTORY_NUGET_SOURCE" || true
          jf dotnet restore --module seed-nuget --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"

      # ---- Build & push images (attach to SAME build) ----
      - uses: docker/setup-buildx-action@v3
      - name: Docker login
        run: echo "${{ steps.jf-setup.outputs.oidc-token }}" >/dev/null || true  # no-op; jf handles auth
      - name: Build+push API
        run: |
          jf docker build -t $IMG_API:${{ github.sha }} -f api/Dockerfile api \
            --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          jf docker push  $IMG_API:${{ github.sha }} \
            --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          echo "API_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMG_API:${{ github.sha }} | cut -d'@' -f2)" >> $GITHUB_ENV
      - name: Build+push Frontend
        run: |
          jf docker build -t $IMG_FE:${{ github.sha }} -f frontend/Dockerfile frontend \
            --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          jf docker push  $IMG_FE:${{ github.sha }} \
            --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          echo "FE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMG_FE:${{ github.sha }} | cut -d'@' -f2)" >> $GITHUB_ENV
      - name: Build+push Seedgen
        run: |
          jf docker build -t $IMG_SEED:${{ github.sha }} -f tools/seedgen/Dockerfile tools/seedgen \
            --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          jf docker push  $IMG_SEED:${{ github.sha }} \
            --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"
          echo "SEED_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMG_SEED:${{ github.sha }} | cut -d'@' -f2)" >> $GITHUB_ENV

      # ---- SBOM (CycloneDX only; attach to build) ----
      - name: Install Syft
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Generate+upload SBOMs
        run: |
          mkdir -p _sbom
          syft $IMG_API@${API_DIGEST}   -o cyclonedx-json > _sbom/api.cdx.json
          syft $IMG_FE@${FE_DIGEST}     -o cyclonedx-json > _sbom/frontend.cdx.json
          syft $IMG_SEED@${SEED_DIGEST} -o cyclonedx-json > _sbom/seed.cdx.json
          jf rt u "_sbom/*.json" "generic-local/sbom/$BUILD_NAME/$BUILD_NUMBER/" \
            --build-name "$BUILD_NAME" --build-number "$BUILD_NUMBER"

      # ---- Sign images (Cosign keyless). Optional: set COSIGN_EXPERIMENTAL=1 if needed ----
      - uses: sigstore/cosign-installer@v3.7.0
      - name: Sign images
        env: { COSIGN_YES: "true" }
        run: |
          cosign sign $IMG_API@${API_DIGEST}
          cosign sign $IMG_FE@${FE_DIGEST}
          cosign sign $IMG_SEED@${SEED_DIGEST}

      # ---- Publish build-info once, then Xray-scan the BUILD ----
      - name: Publish build-info
        run: |
          jf rt build-collect-env "$BUILD_NAME" "$BUILD_NUMBER"
          jf rt build-add-git    "$BUILD_NAME" "$BUILD_NUMBER"
          jf rt build-publish    "$BUILD_NAME" "$BUILD_NUMBER"
      - name: Xray scan (build gate)
        run: jf xr scan --build "$BUILD_NAME" --build-number "$BUILD_NUMBER" --fail=true
